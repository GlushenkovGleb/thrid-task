@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

System_Boundary(systemBoundary, "Система учета клининговых работ") {
  Container(mobileApp, "Мобильное приложение", "Native App", "Приложение для сканирования QR-кодов и получения статистики уборок.\nИспользуется уборщиками для оперативной фиксации фактов уборки.")
  Container(webApp, "WEB-интерфейс", "Web Application", "Интерфейс для менеджеров, администраторов и клиентов.\nПозволяет формировать отчеты, управлять заданиями и оставлять отзывы.")
  Container(api, "REST API-сервер", "API Server", "Обеспечивает обмен данными между клиентскими приложениями и серверной логикой системы.\nПоддержка аутентификации и авторизации, обработка запросов в формате JSON.")
  Container(bot, "Telegram Bot", "Service", "Обрабатывает входящие сообщения от мобильного приложения, полученные через сканирование QR-кодов.\nПроводит валидацию данных и передает их в API.")
  Container(dataProc, "Сервис обработки данных", "Service", "Агрегирует и обрабатывает данные о выполненных уборках для расчёта заработной платы и формирования отчетов.")
  ContainerDb(database, "Реляционная база данных", "PostgreSQL / MySQL", "Хранит данные о сотрудниках, объектах, выполненных уборках и отзывах.\nОбеспечивает целостность и быстрый доступ к данным.")
}

' Взаимодействия между контейнерами внутри системы:
Rel(mobileApp, api, "Отправка данных об уборке, запрос статистики", "HTTPS / JSON")
Rel(webApp, api, "Управление системой, запрос отчетов", "HTTPS / JSON")
Rel(bot, api, "Передача данных сканирования и уведомлений", "HTTPS / JSON")
Rel(api, dataProc, "Передача данных для агрегации и расчёта", "REST / JSON")
Rel(api, database, "Чтение и запись данных", "JDBC/SQL")
Rel(dataProc, database, "Сохранение и получение агрегированных данных", "JDBC/SQL")

@enduml
